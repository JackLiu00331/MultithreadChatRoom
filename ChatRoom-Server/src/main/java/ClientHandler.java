import Database.DatabaseManager;import Model.Message;import Model.User;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.net.Socket;public class ClientHandler implements Runnable{    private Socket clientSocket;    private ChatServer server;    private ObjectInputStream inputStream;    private ObjectOutputStream outputStream;    private String username;    private static boolean isRunning = true;    public ClientHandler(Socket clientSocket, ChatServer server) {        this.clientSocket = clientSocket;        this.server = server;    }    @Override    public void run() {        try {            outputStream = new ObjectOutputStream(clientSocket.getOutputStream());            inputStream = new ObjectInputStream(clientSocket.getInputStream());            while (isRunning) {                Message message = (Message) inputStream.readObject();                if (message != null) {                    handleClientMessage(message);                }            }        } catch (IOException | ClassNotFoundException e) {            System.err.println("Server - Error initializing client handler: " + e.getMessage());        } finally {            cleanUp();        }    }    private void handleClientMessage(Message message) {        switch (message.getType()){            case REGISTER -> handleRegister(message);            case LOGIN -> handleLogin(message);            default -> System.err.println("Server - Unknown message type received: " + message.getType());        }    }    private void handleLogin(Message message) {        boolean success = DatabaseManager.loginUser(message.getSender());        Message response;        if(success){            this.username = message.getSender().getUsername();            server.addClient(username, this);            response = new Message(Message.MessageType.LOGIN_SUCCESS, "Login successful.");            sendMessage(response);            System.out.println("Server - User logged in: " + username);            server.notifyUserJoin(username);        }else {            response = new Message(Message.MessageType.LOGIN_FAILURE, "Login failed. Please check your credentials.");            sendMessage(response);            System.out.println("Server - Login failed for user: " + message.getSender().getUsername());        }    }    private void handleRegister(Message message) {        boolean success = DatabaseManager.registerUser(message.getSender());        Message response;        if (success) {            response = new Message(Message.MessageType.REGISTER_SUCCESS, "Registration successful.");            sendMessage(response);            System.out.println("Server - User registered: " + message.getSender().getUsername());        } else {            response = new Message(Message.MessageType.REGISTER_FAILURE, "Registration failed. Username may already exist.");            sendMessage(response);            System.out.println("Server - Registration failed for user: " + message.getSender().getUsername());        }    }    private void cleanUp() {        try {            if (inputStream != null) inputStream.close();            if (outputStream != null) outputStream.close();            if (clientSocket != null && !clientSocket.isClosed()) clientSocket.close();            System.out.println("Server - Client disconnected: " + clientSocket.getInetAddress());        } catch (IOException e) {            System.err.println("Server - Error closing client connection: " + e.getMessage());        }    }    public void sendMessage(Message message) {        try{            synchronized (outputStream){                outputStream.writeObject(message);                outputStream.flush();            }        }catch (IOException e){            System.err.println("Server - Error sending message to client: " + e.getMessage());        }    }}